Ejercicio de cartas españolas orientado a objetos:

Cada carta tiene un número entre 1 y 12 (el 8 y el 9 no los incluimos) y un palo 
(espadas, bastos, oros y copas)
La baraja estará compuesta por un conjunto de cartas, 40 exactamente.

Las operaciones que podrá realizar la baraja son:

Barajar():
  Cambia de posición todas las cartas aleatoriamente.

SiguienteCarta():
  Devuelve la siguiente carta que está en la baraja, cuando no haya más o se haya
   llegado al final, se indica al usuario que no hay más cartas.

CartasDisponibles():
  Indica el número de cartas que aún puede repartir

DarCartas(int cantidad):
  Dado un número de cartas que nos pidan, le devolveremos ese número de cartas 
  (piensa que puedes devolver). En caso de que haya menos cartas que las pedidas, 
  no devolveremos nada pero debemos indicárselo al usuario.

CartasMonton():
  Mostramos aquellas cartas que ya han salido, si no ha salido ninguna indicárselo
   al usuario.

MostrarBaraja():
  Muestra todas las cartas hasta el final. Es decir, si se saca una carta y 
  luego se llama al método, este no mostrara esa primera carta.


Escribir un programa que dentro de un bucle vaya mostrando las opciones que 
querramos, por ejemplo

1 - Barajar
2 - Mostrar siguiente carta
3 - Mostrar cartas disponibles
4 - Dar cartas
5 - Mostrar cartas del monton
6 - Mostrar baraja
7 - Salir

--------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ejercicio14
{
    public class Carta
    {
        
        public int NumeroCarta { get; set; }
        public string ColorCarta { get; set; }
    }
}

---------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Ejercicio14
{
    internal class Baraja:Carta
    {
        public List<Carta> baraja = new List<Carta>();
        private int sigCarta = 0;

        public List<Carta> crearBaraja()
        {
            for (int j = 0; j < 4; j++)
            {
                for (int i = 0; i < 12; i++)
                {
                    if(i == 7 || i == 8)
                    {
                        continue;
                    }
                    
                Carta carta= new Carta();
                switch (j)
                {
                    case 0:
                        carta.ColorCarta = "espadas";
                        break;
                    case 1:
                        carta.ColorCarta = "bastos";
                        break;
                    case 2:
                        carta.ColorCarta = "oros";
                        break;
                    case 3:
                        carta.ColorCarta = "copas";
                        break;
                    default:
                        break;
                }

                carta.NumeroCarta = i+1;
                baraja.Add(carta);

                }
            }
            return baraja;
        }
        
        public Carta[] Barajar(List<Carta> barajaOrdenada)
        {
            Random aleatorio = new Random();
            Carta[] barajaRandom = new Carta[40];

            int[] posicion = new int[40];
            for (int j = 0; j < posicion.Length; j++)
            {
                int posRandom = aleatorio.Next(40);
                int repetido = 0;
                do
                {
                    repetido = 0;
                    for (int k = 0; k < j; k++)
                    {
                        if (posicion[k] == posRandom)
                        {
                            posRandom = aleatorio.Next(40); 
                            repetido = 1;
                        }
                    }
                    
                } while (repetido == 1);
                
                posicion[j] = posRandom;
            }

            for (int i = 0; i < 40; i++)
            {   
                barajaRandom[posicion[i]]= barajaOrdenada[i];          
            }
            
            return barajaRandom;
        } 

        public Carta SiguienteCarta(Carta[] cartas)
        {
            Carta SigCarta = cartas[sigCarta];
            sigCarta++;
            return SigCarta;
        }

        public int CartasDisponibles(List<Carta> barajaOrdenada)
        {
            int cartasDisp = barajaOrdenada.Count()-sigCarta;
            return cartasDisp;
        }

        public Carta[] DarCartas(int cantidad, Carta[] cartas)
        {
            Carta[] cartasPedidas = new Carta[cantidad];
            int disponibles = CartasDisponibles(baraja);
            if(cantidad <= disponibles)
            {
                for (int i = 0; i < cartasPedidas.Length; i++)
                {
                    cartasPedidas[i] = SiguienteCarta(cartas);
                }
            sigCarta += cantidad;
            }
            return cartasPedidas;
        }

        public Carta[] CartasMonton(Carta[] cartas)
        {
            Carta[] cartasDadas = new Carta[sigCarta];
            for (int i = 0; i < cartasDadas.Length; i++)
            {
                cartasDadas[i] = cartas[i];
            }
            return cartasDadas;
        }       

        public Carta[] MostrarBaraja(Carta[] cartas)
        {
            int cartasEnBaraja = cartas.Length - sigCarta;
            Carta[] cartasSinDar = new Carta[cartasEnBaraja];
            for (int i = 0; i < cartasEnBaraja; i++)
            {
                cartasSinDar[i] = cartas[sigCarta+i];
            }
            return cartasSinDar;
        }
    }
}


------------------------------------------------------------------------------------------------

﻿using Ejercicio14;

Baraja baraja = new Baraja();
var barajaOrdenada = baraja.crearBaraja();
Carta[] barajada = new Carta[40];

var maxCartas = 0;
var salir = true;

while (salir)
{
    Console.WriteLine(" ");
    Console.WriteLine("Elija la opcion que desea \n 1 - Barajar \n 2 - Mostrar siguiente carta \n 3 - Mostrar cartas disponibles \n 4 - Dar cartas \n 5 - Mostrar cartas del monton \n 6 - Mostrar baraja \n 7 - Salir");
    int opcion = int.Parse(Console.ReadLine());
    
    switch (opcion)
    {
        case 1:
            barajada = baraja.Barajar(barajaOrdenada);
            foreach (var item in barajada)
            {
                Console.Write(" ");
                Console.Write(item.NumeroCarta + " " + item.ColorCarta);
            }
            break;
        case 2:
            if(maxCartas < 40)
            {
                var sigCarta = baraja.SiguienteCarta(barajada);
                Console.WriteLine("");
                Console.WriteLine("Ha salido un: " + sigCarta.NumeroCarta + " de " + sigCarta.ColorCarta);
                maxCartas++;
            }
            else
            {
                Console.WriteLine("No hay mas Cartas ");
            }
            break;
        case 3:
            int disponibles = baraja.CartasDisponibles(barajaOrdenada);
            Console.WriteLine("");
            Console.WriteLine("Quedan en la baraja: " + disponibles + " cartas disponibles");
            break;
        case 4:
            Console.WriteLine("Indique el numero de cartas que quiere ");
            int cantidad = int.Parse(Console.ReadLine());
            int disponi = baraja.CartasDisponibles(barajaOrdenada);
            if(cantidad <= disponi)
            {
                var cartasPedidas = baraja.DarCartas(cantidad, barajada);
                foreach (var item in cartasPedidas)
                {
                    Console.Write(" ");
                    Console.Write(item.NumeroCarta + " " + item.ColorCarta);
                }
            }
            else
            {
                Console.WriteLine("No hay tantas cartas en la baraja ");
            }
            break;
        case 5:
            var cartasDadas = baraja.CartasMonton(barajada);
            foreach (var item in cartasDadas)
            {
                Console.Write(" ");
                Console.Write(item.NumeroCarta + " " + item.ColorCarta);
            }
            break;
        case 6:
            var cartasNoDadas = baraja.MostrarBaraja(barajada);
            foreach (var item in cartasNoDadas)
            {
                Console.Write(" ");
                Console.Write(item.NumeroCarta + " " + item.ColorCarta);
            }
            break;
        case 7:
            salir = false;
            break;
        default:
            break;
    }

}

